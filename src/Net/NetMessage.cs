using System.Threading.Tasks;
using SourceDemoParser.Messages.Net;

namespace SourceDemoParser
{
    using NetMessageType = System.Type;

    public abstract class NetMessage : INetMessage
    {
        public byte Code { get; set; }
        public string Name { get; }

        public NetMessage() => Name = GetType().Name;
        public NetMessage(byte code) : this() => Code = code;

        public bool IsType<T>() => typeof(T) == GetType();

        public abstract Task Read(SourceBufferReader buf, SourceDemo demo);
        public abstract Task Write(SourceBufferWriter buf, SourceDemo demo);

        public override string ToString() => Name;
    }

    public static class NetMessages
    {
        public static NetMessageType[] Default = new NetMessageType[]
        {
            typeof(NetNop),
            typeof(NetDisconnect),
            typeof(NetFile),
            typeof(NetTick),
            typeof(NetStringCmd),
            typeof(NetSetConVar),
            typeof(NetSignonState),
            typeof(SvcPrint),
            typeof(SvcServerInfo),
            typeof(SvcSendTable),
            typeof(SvcClassInfo),
            typeof(SvcSetPause),
            typeof(SvcCreateStringTable),
            typeof(SvcUpdateStringTable),
            typeof(SvcVoiceInit),
            typeof(SvcVoiceData),
            default,
            typeof(SvcSounds),
            typeof(SvcSetView),
            typeof(SvcFixAngle),
            typeof(SvcCrosshairAngle),
            typeof(SvcBspDecal),
            default,
            typeof(SvcUserMessage),
            typeof(SvcEntityMessage),
            typeof(SvcGameEvent),
            typeof(SvcPacketEntities),
            typeof(SvcTempEntities),
            typeof(SvcPrefetch),
            typeof(SvcMenu),
            typeof(SvcGameEventList),
            typeof(SvcGetCvarValue),
            typeof(SvcCmdKeyValues)
        };
        public static NetMessageType[] Portal2 = new NetMessageType[]
        {
            typeof(NetNop),
            typeof(NetDisconnect),
            typeof(NetFile),
            typeof(NetSplitScreenUser),
            typeof(NetTick),
            typeof(NetStringCmd),
            typeof(NetSetConVar),
            typeof(NetSignonState),
            typeof(SvcServerInfo),
            typeof(SvcSendTable),
            typeof(SvcClassInfo),
            typeof(SvcSetPause),
            typeof(SvcCreateStringTable),
            typeof(SvcUpdateStringTable),
            typeof(SvcVoiceInit),
            typeof(SvcVoiceData),
            typeof(SvcPrint),
            typeof(SvcSounds),
            typeof(SvcSetView),
            typeof(SvcFixAngle),
            typeof(SvcCrosshairAngle),
            typeof(SvcBspDecal),
            typeof(SvcSplitScreen),
            typeof(SvcUserMessage),
            typeof(SvcEntityMessage),
            typeof(SvcGameEvent),
            typeof(SvcPacketEntities),
            typeof(SvcTempEntities),
            typeof(SvcPrefetch),
            typeof(SvcMenu),
            typeof(SvcGameEventList),
            typeof(SvcGetCvarValue),
            typeof(SvcCmdKeyValues),
            typeof(SvcPaintmapData)
        };
        public static NetMessageType[] Csgo = new NetMessageType[]
        {
            typeof(NetNop),
            typeof(NetDisconnect),
            typeof(NetFile),
            typeof(NetSplitScreenUser),
            typeof(NetTick),
            typeof(NetStringCmd),
            typeof(NetSetConVar),
            typeof(NetSignonState),
            typeof(SvcServerInfo),
            typeof(SvcSendTable),
            typeof(SvcClassInfo),
            typeof(SvcSetPause),
            typeof(SvcCreateStringTable),
            typeof(SvcUpdateStringTable),
            typeof(SvcVoiceInit),
            typeof(SvcVoiceData),
            typeof(SvcPrint),
            typeof(SvcSounds),
            typeof(SvcSetView),
            typeof(SvcFixAngle),
            typeof(SvcCrosshairAngle),
            typeof(SvcBspDecal),
            typeof(SvcSplitScreen),
            typeof(SvcUserMessage),
            typeof(SvcEntityMessage),
            typeof(SvcGameEvent),
            typeof(SvcPacketEntities),
            typeof(SvcTempEntities),
            typeof(SvcPrefetch),
            typeof(SvcMenu),
            typeof(SvcGameEventList),
            typeof(SvcGetCvarValue),
            default,
            typeof(SvcPaintmapData),
            typeof(SvcCmdKeyValues),
            typeof(SvcEncryptedData),
            typeof(SvcHltvReplay),
            default,
            typeof(SvcBroadcastCommand),
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            default,
            typeof(NetPlayerAvatarData)
        };
    }
}
